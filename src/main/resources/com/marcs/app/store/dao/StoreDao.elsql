@NAME(userProfileFields)
  up.id, up.first_name, up.last_name, up.email, up.web_role_id,
  up.email_reports_enabled, up.hire_date, up.insert_date

@NAME(storeFields)
  st.id AS 'store_id', st.name AS 'store_name', st.regional_id, st.manager_id

@NAME(userStatusFields)
  us.request_id, us.app_access, us.account_status, us.updated_user_id

@NAME(getStores)
  SELECT 
    @INCLUDE(storeFields)
  FROM
    stores st
  @WHERE
    @AND(:id)
      st.id IN (:id)
    @AND(:regionalId)
      st.regional_id IN (:regionalId)
    @AND(:managerId) 
      st.manager_id IN (:managerId)
    @AND(:searchEnabled = true)
      @INCLUDE(search)
  ORDER BY st.name

@NAME(getRegionalOfStore)
  SELECT 
    @INCLUDE(userProfileFields), @INCLUDE(storeFields), @INCLUDE(userStatusFields)
  FROM
    stores st
    LEFT JOIN user_profile up ON st.regional_id = up.id
    JOIN web_role wr ON up.web_role_id = wr.id
    JOIN user_status us ON up.id = us.user_id
  WHERE
    st.id = :storeId

@NAME(getManagerOfStoreById)
  SELECT 
    @INCLUDE(userProfileFields), @INCLUDE(storeFields), @INCLUDE(userStatusFields)
  FROM
    stores st
    LEFT JOIN user_profile up ON st.manager_id = up.id
    JOIN web_role wr ON up.web_role_id = wr.id
    JOIN user_status us ON up.id = us.user_id
  WHERE
    st.id = :storeId

@NAME(updateStore)
  UPDATE stores
  SET
    id = :newId,
    name = :storeName
  WHERE 
    id = :oldId

@NAME(updateStoreManagerByStoreId)
  UPDATE stores
  SET
    manager_id = :managerId
  WHERE id = :storeId

@NAME(updateRegionalOfStore)
  UPDATE stores
  SET
    regional_id = :regionalId
  WHERE id = :storeId

@NAME(insertStore)
  INSERT INTO stores (id, name, regional_id)
  VALUES (:storeId, :storeName, :regionalId)

@NAME(deleteStore)
  DELETE FROM stores
  WHERE id = :storeId

@NAME(search)
  (@VALUE(:searchContent))