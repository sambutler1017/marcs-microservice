@NAME(vacationFields)
  v.id, v.user_id, v.start_date, v.end_date, v.insert_date, v.status, v.notes,
  st.id AS 'store_id', st.regional_id, CONCAT(up.first_name, ' ', up.last_name) AS name, up.web_role_id

@NAME(getVacations)
  SELECT @INCLUDE(vacationFields)
  FROM user_vacations v
    INNER JOIN user_profile up ON v.user_id = up.id
    INNER JOIN web_role wr ON up.web_role_id = wr.id
    LEFT JOIN stores st ON up.store_id = st.id
  @WHERE
    @AND(:id)
      v.id IN (:id)
    @AND(:user_id)
      v.user_id IN (:user_id)
    @AND(:regional_id)
      st.regional_id IN (:regional_id)
    @AND(:status)
      v.status IN (:status)
    @AND(:store_id)
      up.store_id IN (:store_id)
    @AND(:web_role_text_id)
      wr.web_role_text_id IN (:web_role_text_id)
    @AND(:reportFilter)
      start_date >= (DATE_ADD(CURDATE(), INTERVAL 5 DAY) - WEEKDAY(CURDATE()))
      AND start_date <= DATE_ADD((DATE_ADD(CURDATE(), INTERVAL 5 DAY) - WEEKDAY(CURDATE())), INTERVAL 6 DAY)
  ORDER BY start_date DESC

@NAME(deleteVacations)
  DELETE FROM user_vacations 
  @WHERE
    @AND(:id)
      id = :id
    @AND(:user_id)
      user_id = :user_id

@NAME(insertVacation)
  INSERT INTO user_vacations (user_id, start_date, end_date, status, notes)
  VALUES (:user_id, :start_date, :end_date, :status, :notes)

@NAME(updateVacationInfoById)
  UPDATE user_vacations
  SET
    status = :status,
    notes  = :notes
  WHERE id = :id

@NAME(updateVacationDatesById)
  UPDATE user_vacations
  SET
    start_date = :start_date,
    end_date   = :end_date
  WHERE id = :id

@NAME(markExpiredVacations)
  UPDATE user_vacations 
  SET status = 'EXPIRED'
  WHERE end_date < CURRENT_DATE()
  AND status != 'EXPIRED'

@NAME(deleteAllExpiredVacations)
  DELETE FROM user_vacations 
  WHERE end_date < DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL :range MONTH)
  AND status = 'EXPIRED'
